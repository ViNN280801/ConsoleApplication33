#include <iostream>
#include <locale.h>
#include <stdio.h>
#include <time.h>
#include "Header.h"
using namespace std;
void main()
{
	setlocale(LC_ALL, "rus");
	srand(time(NULL));
	short int w;
	printf("Введите задание: ");
	cin >> w;
	switch (w)
	{
	case 1:
	{
		//1.Даны два массива, упорядоченных по возрастанию : А[n] и B[m].Сформируйте массив C[n + m], состоящий из 
		//элементов массивов А и В, упорядоченный по возрастанию(Массив С не должен сортироваться).
		int lenght = 10, mas[10], mas2[10];
		printf("First array: \n");
		fillArray(mas, lenght);
		printArray(mas, lenght);
		printf("Second array: \n");
		fillArray(mas2, lenght);
		printArray(mas2, lenght);
		printf("Third array: \n");
		printArray(mas, lenght);
		printArray(mas2, lenght);
	}
	break;
	case 2:
	{
		//2.Даны два массива : А[n] и B[m].Необходимо создать третий массив, 
		//в котором нужно собрать общие элементы двух массивов.
		int mas1[10], mas2[10], lenght = 10;
		SameElementsInArrays(mas1, lenght, mas2);
	}
	break;
	case 3:
	{
		//3.Даны два массива : А[n] и B[m]. Необходимо создать третий массив, 
		//в котором нужно собрать элементы массива A, которые не включаются в B.
		int mas1[10], lenght = 10, mas2[3], lenght2 = 3, mas3[7], lenght3 = 7;
		In_A_but_not_in_B(mas1, lenght, mas2, mas3);
	}
	break;
	case 4:
	{
		//4.Даны два массива : А[n] и B[m]. Необходимо создать третий массив, 
		//в котором нужно собрать элементы массива B, которые не включаются в A.
		int mas1[10], mas2[10], lenght = 10, mas3[10];
		In_B_but_not_in_A(mas1, lenght, mas2, mas3);
	}
	break;
	case 5:
	{
		//5.Даны два массива : А[n] и B[m]. Необходимо создать третий массив, 
		//в котором нужно собрать элементы массивов A и B, которые не являются общими для них.
		int mas1[10], mas2[10], lenght = 10;
		AntiSameElementsInArrays(mas1, lenght, mas2);
	}
	break;
	case 6:
	{
		//1.*Напишите функцию, которая принимает одномерный массив 
		//целых чисел и заполняет его случайными числами.
		int mas[10], lenght = 10;
		fillArray(mas, lenght);
		printArray(mas, lenght);
	}
	break;
	case 7:
	{
		//2.*Напишите функцию, которая принимает число и 
		//возвращает истину, если число четное и ложь, если нечетное.
		int T;
		Parity(&T);
	}
	break;
	case 8:
	{
		//3.**Написать функцию, которая возвращает истину, если переданное число простое, и ложь, если не простое.
		//Простое число – это число, которое делиться ТОЛЬКО на 1 и на себя(2, 5, 7, 11 и т.д.).
		int number;
		SimpleNumber(&number);
	}
	break;
	case 9:
	{
		//4.***Число называется совершенным, если сумма всех его делителей 
		//равна ему самому. Напишите функцию поиска таких чисел во введенном интервале.
		int interval;
		AbsoluteNumber(&interval);
	}
	break;
	case 10:
	{
		//5.**Написать функцию, которая возвращает истину, если переданный параметр является алфавитно - цифровым и ложь, если не является.
		//Не понял что такое алфавитно-цифровой параметр, и в интернете не нашёл
	}
	break;
	case 11:
	{
		//6.**Написать функцию, которая принимает одномерный массив целых чисел и возвращает значения максимального числа в этом массиве.
		int mas[10], lenght = 10;
		MaxElementInArray(mas, lenght);
	}
	break;
	case 12:
	{
		//7.**Напишите функцию, которая принимает три массива целых чисел. Выполнить поэлементное сложение элементов первых двух массивов, и результат занести в третий массив.
		int mas1[10], mas2[10], mas3[10];
		SummaElementovArray(mas1, mas2, mas3);
	}
	break;
	case 13:
	{
		//5.**Написать функцию, которая принимает целое шестизначное число и проверяет равна ли сумма первых трех цифр сумме последних трех цифр(счастливый билет).
		//Функция возвращает истину, если число счастливое(суммы равны) и ложь, если не счастливое(суммы не равны).
		int number;
		HappyTicket(&number);
	}
	break;
	}
}
